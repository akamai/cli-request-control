#!/usr/bin/env python

import sys
import os
import argparse
import logging
import requests
import json
import shutil

py3 = sys.version_info[0] >= 3

if py3:
    from configparser import ConfigParser
else:
    import ConfigParser

from akamai.edgegrid import EdgeRc
from cloudlet_api_wrapper import Cloudlet

"""
This code leverages Akamai OPEN API to control Request Control cloudlet.
Author: dkuciel@akamai.com
"""

PACKAGE_VERSION = "0.0.1"

# Configuration specific to Request Control Cloudlet (IG)
cloudlet_code = "IG"
cache_store_path = os.getenv("AKAMAI_CLI_CACHE_DIR") if os.getenv("AKAMAI_CLI_CACHE_DIR") else os.path.join(os.curdir, 'cache')
groups_cache_file = os.path.join(cache_store_path, 'groups_%s.json' % cloudlet_code)
policies_cache_file = os.path.join(cache_store_path, 'policies_%s.json' % cloudlet_code)
policies_cache_path = os.path.join(cache_store_path, 'policies_%s' % cloudlet_code)

# Setup logging
if not os.path.exists('logs'):
    os.makedirs('logs')
log_file = os.path.join('logs', 'request-control.log')

# Set the format of logging in console and file separately
log_formatter = logging.Formatter(
    "%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
console_formatter = logging.Formatter("%(message)s")

root_logger = logging.getLogger()

logfile_handler = logging.FileHandler(log_file, mode='w')
logfile_handler.setFormatter(log_formatter)
root_logger.addHandler(logfile_handler)

console_handler = logging.StreamHandler()
console_handler.setFormatter(console_formatter)

root_logger.addHandler(console_handler)
# Set Log Level to DEBUG, INFO, WARNING, ERROR, CRITICAL
root_logger.setLevel(logging.INFO)


def init_config(edgerc_file, section):
    if not edgerc_file:
        if not os.getenv("AKAMAI_EDGERC"):
            edgerc_file = os.path.join(os.path.expanduser("~"), '.edgerc')
        else:
            edgerc_file = os.getenv("AKAMAI_EDGERC")

    if not os.access(edgerc_file, os.R_OK):
        root_logger.error("Unable to read edgerc file \"%s\"" % edgerc_file)
        exit(1)

    if not section:
        if not os.getenv("AKAMAI_EDGERC_SECTION"):
            section = "cloudlets"
        else:
            section = os.getenv("AKAMAI_EDGERC_SECTION")

    try:
        edgerc = EdgeRc(edgerc_file)
        # edgerc.get(section, 'host')
        config = dict(edgerc.items(section))
        return config
    except ConfigParser.NoSectionError:
        root_logger.error("Edgerc section \"%s\" not found" % section)
        exit(1)
    except Exception:
        root_logger.info(
            "Unknown error occurred trying parse edgerc file (%s)" %
            edgerc_file)
        exit(1)


def cli():
    prog = get_prog_name()
    if len(sys.argv) == 1:
        prog += " [command]"

    parser = argparse.ArgumentParser(
        description='Akamai CLI for Request Control',
        add_help=False,
        prog=prog)
    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s ' +
                PACKAGE_VERSION)

    subparsers = parser.add_subparsers(
        title='Commands', dest="command", metavar="")

    actions = {}

    subparsers.add_parser(
        name="help",
        help="Show available help",
        add_help=False).add_argument(
        'args',
        metavar="",
        nargs=argparse.REMAINDER)

    actions["setup"] = create_sub_command(
        subparsers,
        "setup",
        "Initial setup to cache policy list "
        "information")

    actions["list"] = create_sub_command(
        subparsers,
        "list",
        "Lists policies from the account "
        "information")

    actions["download"] = create_sub_command(
        subparsers, "download",
        "Download the policy version rules json and output to "
        "rules folder. (Optionally, use --output-file to specify "
        "location of outputfile)",
        [{"name": "output-file",
          "help": "Output filename to store the rules"}],
        [{"name": "policy", "help": "Policy name"},
         {"name": "version", "help": "Version number of the policy"}])

    actions["create-version"] = create_sub_command(
        subparsers, "create-version",
        "Create a new policy version using a local file from the "
        "rules folder with name <policy>.json",
        [{"name": "force", "help": "Do not prompt for user confirmation",
          "action": "store_true"},
          {"name": "file", "help": "File path for input rules file"}],
        [{"name": "policy", "help": "Policy name"}])

    actions["activate"] = create_sub_command(
        subparsers, "activate", "Activate a specific policy version",
        [{"name": "policy", "help": "Policy name"}],
        [{"name": "network",
          "help": "Network to be activated on (case-insensitive).",
          "type": str.lower, "choices": {"staging", "production"}},
         {"name": "version", "help": "Version number of the policy"}])

    actions["add-rule"] = create_sub_command(
        subparsers, "add-rule", "Add a new rule to a specific version in the specified policy.",
        [
            {"name": "rule", "help": "Rule name"},
            {"name": "index", "help": "Index"},
            {"name": "file", "help": "Path to file containing rule details"},
            {"name": "allow_ip", "help": "Allow specified IP"},
            {"name": "deny_ip", "help": "Deny specified IP"},
            {"name": "allow_country", "help": "Allow specified country code"},
            {"name": "deny_country", "help": "Deny specified country code"},
            {"name": "give_branded_response_for_ip", "help": "Set branded response for specified IP"},
            {"name": "give_branded_response_for_country", "help": "Set branded response for specified country code"},
        ],
        [
            {"name": "policy", "help": "Policy name"},
            {"name": "version", "help": "Version number of the policy"}
        ])

    actions["modify-rule"] = create_sub_command(
        subparsers, "modify-rule", "Updates attributes of an existing rule within a policy version.",
        [
            {"name": "rule", "help": "Rule name"},
            # {"name": "index", "help": "Index"},
            {"name": "file", "help": "Path to file containing rule details"},
            {"name": "allow_ip", "help": "Allow specified IP"},
            {"name": "deny_ip", "help": "Deny specified IP"},
            {"name": "allow_country", "help": "Allow specified country code"},
            {"name": "deny_country", "help": "Deny specified country code"},
            {"name": "give_branded_response_for_ip", "help": "Set branded response for specified IP"},
            {"name": "give_branded_response_for_country", "help": "Set branded response for specified country code"},
            {"name": "disable", "help": "Disable rule", "action": "store_true"},
            {"name": "enable", "help": "Enable rule", "action": "store_true"},
        ],
        [
            {"name": "policy", "help": "Policy name"},
            {"name": "version", "help": "Version number of the policy"},
            {"name": "rule_id", "help": "Rule Id"}
        ])

    args = parser.parse_args()
    if len(sys.argv) <= 1:
        parser.print_help()
        return 0

    if args.command == "help":
        if len(args.args) > 0:
            if actions[args.args[0]]:
                actions[args.args[0]].print_help()
        else:
            parser.prog = get_prog_name() + " help [command]"
            parser.print_help()
        return 0

    if args.command != "setup":
        confirm_setup(args)

    return getattr(sys.modules[__name__], args.command.replace("-", "_"))(args)


def create_sub_command(
        subparsers,
        name,
        help,
        optional_arguments=None,
        required_arguments=None):
    action = subparsers.add_parser(name=name, help=help, add_help=False)

    if required_arguments:
        required = action.add_argument_group("required arguments")
        for arg in required_arguments:
            name = arg["name"]
            del arg["name"]
            required.add_argument("--" + name,
                                  required=True,
                                  **arg
                                  )

    optional = action.add_argument_group("optional arguments")
    if optional_arguments:
        for arg in optional_arguments:
            name = arg["name"]
            del arg["name"]
            optional.add_argument("--" + name,
                                  required=False,
                                  **arg
                                  )

    optional.add_argument(
        "--edgerc",
        help="Location of the credentials file [$AKAMAI_EDGERC]",
        default=os.path.join(
            os.path.expanduser("~"),
            '.edgerc'))

    optional.add_argument(
        "--section",
        help="Section of the credentials file [$AKAMAI_EDGERC_SECTION]",
        default="cloudlets")

    optional.add_argument(
        "--debug",
        help="DEBUG mode to generate additional logs for troubleshooting",
        action="store_true")

    return action



def setup(args):

    root_logger.info('Setting up required files... please wait')

    if os.path.exists(policies_cache_path):
        shutil.rmtree(policies_cache_path)
    
    os.makedirs(policies_cache_path)

    # API config
    config = init_config(args.edgerc, args.section)

    # API call for groups
    cloudlet_object = Cloudlet(config)

    """
    Group list caching 
    """
    # groups processing against finding items with the given cloudlet type (cloudlet_code)
    """
    groups = cloudlet_object.list_cloudlet_groups()
    cloudlet_id = None
    groups_list = []
    for group_item in groups:
        cloudlet_found = None
        for cloudlet_info in group_item["capabilities"]:
            if cloudlet_info["cloudletCode"] == cloudlet_code:
                cloudlet_found = True
                cloudlet_id = cloudlet_info["cloudletId"]
                break
        if cloudlet_found:
            groups_list.append(group_item)
        else:
            # print json.dumps(group_item, indent=4)
            root_logger.info("Group \"%s\" has no %s cloudlets [skipping]" % (group_item["groupName"], cloudlet_code))

    with open(groups_cache_file, 'w') as group_fh:
        group_fh.write(json.dumps(groups_list, indent=4))
        root_logger.info("Groups [%s] cached to %s" % (len(groups_list), groups_cache_file))
    """

    """
    Policy list caching
    """
    # Frozen until NIMBUS-4227 is solved
    # for group_item in groups_list:
    #     policies = cloudlet_object.list_policies(group_item['groupId'], cloudlet_id)
    #     print json.dumps(policies, indent=4)

    # Workaround: filtering policies records against the given cloudlet_code
    policies = cloudlet_object.list_policies()
    policies_list = []
    for policy_item in policies:
        if policy_item["cloudletCode"] == cloudlet_code:
            policies_list.append(policy_item)

            # caching individual policy
            policy_file = get_policy_file_path(policy_item["name"])
            with open(policy_file, 'w') as policy_fh:
                policy_fh.write(json.dumps(policy_item, indent=4))
                root_logger.info("Policy \"%s\" cached to %s" % (policy_item["name"], policy_file))

    with open(policies_cache_file, 'w') as policy_fh:
        policy_fh.write(json.dumps(policies_list, indent=4))
        root_logger.info("Policies [%s] cached to %s" % (len(policies_list), policies_cache_file))

    # print json.dumps(policies_list, indent=4)
    return 0


def confirm_setup(args):
    if not os.access(policies_cache_file, os.R_OK):
        """
        q = "Cache not found. You must create it to continue [Y/n]:"
        if py3:
            r = input(q)
        else:
            r = raw_input(q)

        if str.lower(r) == 'n':
            root_logger.info('Exiting.')
            exit(1)
        """
        root_logger.info('Cache not found...creating')
        return setup(args)
    else:
        root_logger.info('Found cache. Proceeding with cached data.')
        root_logger.info('Run "setup" command if you want to refresh the data.')

    return


def download(args):
    policy = args.policy
    version = args.version
    output_file = args.output_file

    # API config
    config = init_config(args.edgerc, args.section)
    cloudlet_object = Cloudlet(config)
    
    policy_file = get_policy_file_path(policy)
    # checking cache against the policy file (to get policy_id)
    if not os.path.isfile(policy_file):
        root_logger.info('Local cache does not contain this policy. Please double check policy name or run "setup" first')
        return 1

    with open(policy_file) as fd:
        policy_info = json.load(fd)
    root_logger.info('Found policy in the cache store: ' + policy_file)

    # getting policy rules
    root_logger.info('Fetching policy rule details...')
    policy_id = policy_info['policyId']
    try:
        policy_details = cloudlet_object.get_cloudlet_policy(policy_id, version=version)
    except Exception as e:
        root_logger.error('Failure in fetching policy rule details...')
        root_logger.debug('Detailed response is: ')
        json.dumps(policy_details, indent=4)
        # print e
        return 1

    # storing the policy rules
    if not output_file:
        output_file = get_policy_file_path(policy, file_type="v."+version)
    with open(output_file, mode='w') as fh:
        fh.write(json.dumps(policy_details, indent=4))
    root_logger.info('Policy rule details stored in: ' + output_file +'\n')
        
    return 0


def create_version(args):
    policy = args.policy
    file = args.file

    # getting policy info from local cache
    policy_file = get_policy_file_path(policy)
    if not os.path.isfile(policy_file):
        root_logger.info('Local cache does not contain this policy. Please double check policy name or run "setup" first')
        return 1

    with open(policy_file) as fd:
        policy_info = json.load(fd)
    root_logger.info('Found policy details in the cache store: ' + policy_file)
    policy_id = policy_info['policyId']
    policy_rules = {"description": policy_info['description']}

    if file:
        if not os.path.isfile(file):
            root_logger.error('File "' + file + '" doesn\'t exist. Please check the file path and try again.\n')
            return 1

        with open(file) as fd:
            policy_rules = json.load(fd)
            if not 'policyId' in policy_rules:
                root_logger.error('File "' + file + '" doesn\'t contain proper policy details. Please download the policy file by using "download" command.\n')
                return 1

            root_logger.error('Using policy details from: ' + file + '\n')
            policy_id = policy_rules['policyId']

            # clean up
            del policy_rules['createdBy']
            del policy_rules['createDate']
            del policy_rules['activations']
            del policy_rules['deleted']
            del policy_rules['lastModifiedBy']
            del policy_rules['lastModifiedDate']
            del policy_rules['location']
            del policy_rules['policyId']
            del policy_rules['revisionId']
            del policy_rules['rulesLocked']
            del policy_rules['version']
            if policy_rules['matchRules']:
                for mr in policy_rules['matchRules']:
                    del mr['location']
                    del mr['matchURL']
            # print json.dumps(policy_rules, indent=4)


    if not args.force:
        root_logger.info('The description field from the json file will be used as comments for this version: "' + policy_rules['description'] + '"')
        root_logger.info(
            '\nContinue? [y/N] ')
        if not str.lower(raw_input()) == "y":
            root_logger.info(
                '\nExiting the program, you may run it again after updating description\n')
            return 1

    # API config
    config = init_config(args.edgerc, args.section)
    cloudlet_object = Cloudlet(config)
    
    try:
        response = cloudlet_object.create_policy_version(policy_id=policy_id, policy_data=json.dumps(policy_rules))
        root_logger.info('Success! Created policy version number: ' + str(response['version']))
    except Exception as e:
        # root_logger.info(
        #     'Cannot create new policy version, Reason: ' + response['detail'])
        root_logger.debug('Detailed Json response is: ')
        json.dumps(response, indent=4)
        # print e
        return 1
    return 0


def list(args=None):
    with open(policies_cache_file) as fd:
        policies_list = json.load(fd)
        print json.dumps(policies_list, indent=4)
    return 0

def activate(args):

    policy = args.policy
    version = args.version
    network = args.network

    if network == 'production':
        network = 'prod'

    # API config
    config = init_config(args.edgerc, args.section)
    cloudlet_object = Cloudlet(config)

    # getting policy ID from the local store
    policy_file = get_policy_file_path(policy)
    if not os.path.isfile(policy_file):
        root_logger.info('Local cache does not contain this policy. Please double check policy name or run "setup" first')
        return 1

    with open(policy_file) as fd:
        policy_info = json.load(fd)
    root_logger.info('Found policy details in the cache store: ' + policy_file)
    policy_id = policy_info['policyId']

    # Update the local copy to latest details
    root_logger.info(
        'Trying to activate policy ' +
        policy +
        ' version ' +
        version +
        ' to ' +
        network +
        ' network')

    try:
        response = cloudlet_object.activate_policy_version(policy_id, version, network)
        # print json.dumps(response, indent=4)
        response = response.pop()
        root_logger.info('Success! The policy version number: ' + str(response['policyInfo']['version']) + ' is activated!')
    except Exception as e:
        # root_logger.info(
        #     'Cannot activate the policy version, Reason: ' + response['detail'])
        root_logger.debug('Detailed Json response is: ')
        json.dumps(response, indent=4)
        # print e
        return 1

    return 0


def add_rule(args):

    rule_template_file = './assets/rule_template.json'

    policy = args.policy
    rule_file = args.file
    rule_name = args.rule
    version = args.version
    index = args.index
    ip_allowed = args.allow_ip
    ip_denied = args.deny_ip
    country_allowed = args.allow_country
    country_denied = args.deny_country
    branded_ip_denied = args.give_branded_response_for_ip
    branded_country_denied = args.give_branded_response_for_country

    # @todo check if file || ip_allowed || ip_denied but not both!!!

    if not index >= 0:
        index = "0"

    # API config
    config = init_config(args.edgerc, args.section)
    cloudlet_object = Cloudlet(config)

    root_logger.info(
        'Adding rule to policy: ' +
        policy +
        ' version ' +
        version +
        ' index ' +
        index)
    
    # getting policy info from local cache
    policy_file = get_policy_file_path(policy)
    if not os.path.isfile(policy_file):
        root_logger.info('Local cache does not contain this policy. Please double check policy name or run "setup" first')
        return 1

    with open(policy_file) as fd:
        policy_info = json.load(fd)
    root_logger.info('Found policy details in the cache store: ' + policy_file)
    policy_id = policy_info['policyId']

    if rule_file:
        # getting rule's details
        if not os.path.isfile(rule_file):
            root_logger.info('Rule file doesn\'t exist. Please double check rule file path')
            return 1

        with open(rule_file) as fd:
            rule_data = json.load(fd)


    if ip_allowed or ip_denied or branded_ip_denied:
        # getting rule's template
        with open(rule_template_file) as fd:
            rule_data = json.load(fd)
    if ip_allowed:
        rule_data['allowDeny'] = "allow"
        rule_data['matches'][0]['matchValue'] = ip_allowed
    if ip_denied:
        rule_data['allowDeny'] = "deny"
        rule_data['matches'][0]['matchValue'] = ip_denied
    if branded_ip_denied:
        rule_data['allowDeny'] = "denybranded"
        rule_data['matches'][0]['matchValue'] = branded_ip_denied
    
    if country_allowed or country_denied or branded_country_denied:
        # getting rule's template
        with open(rule_template_file) as fd:
            rule_data = json.load(fd)
        rule_data['matches'][0]["matchType"] = "countrycode"
    if country_allowed:
        rule_data['allowDeny'] = "allow"
        rule_data['matches'][0]['matchValue'] = country_allowed
    if country_denied:
        rule_data['allowDeny'] = "deny"
        rule_data['matches'][0]['matchValue'] = country_denied
    if branded_country_denied:
        rule_data['allowDeny'] = "denybranded"
        rule_data['matches'][0]['matchValue'] = branded_country_denied
        

    if rule_name:
        rule_data['name'] = rule_name

    try:
        response = cloudlet_object.add_rule(policy_id, version, index, json.dumps(rule_data))
        root_logger.info('Success! Rule added')
        # print response['name']
        # print json.dumps(response, indent=4)
    except Exception as e:
        root_logger.info('Unable to add the rule.')
        root_logger.debug('Detailed Json response is: ')
        print json.dumps(response, indent=4)
        # print e
        return 1
    return 0


def modify_rule(args):

    policy = args.policy
    version = args.version
    rule_id = args.rule_id
    rule_file = args.file
    rule_name = args.rule
    # index = args.index
    ip_allowed = args.allow_ip
    ip_denied = args.deny_ip
    country_allowed = args.allow_country
    country_denied = args.deny_country
    branded_ip_denied = args.give_branded_response_for_ip
    branded_country_denied = args.give_branded_response_for_country

    if args.disable:
        rule_disabled = True
    elif args.enable:
        rule_disabled = False
    else:
        rule_disabled = None

    rule_template_file = './assets/rule_template.json'

    # API config
    config = init_config(args.edgerc, args.section)
    cloudlet_object = Cloudlet(config)

    root_logger.info(
        'Modify rule within policy: ' +
        policy +
        ' version ' +
        version +
        ' rule_id ' +
        rule_id)
    
    # getting policy info from local cache
    policy_file = get_policy_file_path(policy)
    if not os.path.isfile(policy_file):
        root_logger.info('Local cache does not contain this policy. Please double check policy name or run "setup" first')
        return 1

    with open(policy_file) as fd:
        policy_info = json.load(fd)
    root_logger.info('Found policy details in the cache store: ' + policy_file)
    policy_id = policy_info['policyId']

    # getting rule's details
    if rule_file:
        if not os.path.isfile(rule_file):
            root_logger.info('Rule file doesn\'t exist. Please double check rule file path')
            return 1

        with open(rule_file) as fd:
            rule_data = json.load(fd)

    if ip_allowed or ip_denied or branded_ip_denied:
        # getting rule's template
        with open(rule_template_file) as fd:
            rule_data = json.load(fd)
        rule_data['matches'][0]["matchType"] = "clientip"
    if ip_allowed:
        rule_data['allowDeny'] = "allow"
        rule_data['matches'][0]['matchValue'] = ip_allowed
    if ip_denied:
        rule_data['allowDeny'] = "deny"
        rule_data['matches'][0]['matchValue'] = ip_denied
    if branded_ip_denied:
        rule_data['allowDeny'] = "denybranded"
        rule_data['matches'][0]['matchValue'] = branded_ip_denied
    
    if country_allowed or country_denied or branded_country_denied:
        # getting rule's template
        with open(rule_template_file) as fd:
            rule_data = json.load(fd)
        rule_data['matches'][0]["matchType"] = "countrycode"
    if country_allowed:
        rule_data['allowDeny'] = "allow"
        rule_data['matches'][0]['matchValue'] = country_allowed
    if country_denied:
        rule_data['allowDeny'] = "deny"
        rule_data['matches'][0]['matchValue'] = country_denied
    if branded_country_denied:
        rule_data['allowDeny'] = "denybranded"
        rule_data['matches'][0]['matchValue'] = branded_country_denied
     
    
    if rule_name:
        rule_data['name'] = rule_name
    
    if not rule_disabled is None:
        rule_data['disabled'] = rule_disabled

    try:
        response = cloudlet_object.modify_rule(policy_id, version, rule_id, json.dumps(rule_data))
        root_logger.info('Success! Rule modified')
        # print response['name']
        # print json.dumps(response, indent=4)
    except Exception as e:
        root_logger.info('Unable to modify the rule.')
        root_logger.debug('Detailed Json response is: ')
        print json.dumps(response, indent=4)
        # print e
        return 1
    return 0


def get_prog_name():
    prog = os.path.basename(sys.argv[0])
    if os.getenv("AKAMAI_CLI"):
        prog = "akamai request-control"
    return prog


def get_policy_file_path(policy_name, file_type="info"):
    return os.path.join(policies_cache_path, "%s_%s.json" % (policy_name, file_type))


if __name__ == '__main__':
    try:
        status = cli()
        exit(status)
    except KeyboardInterrupt:
        exit(1)

sys.exit(0)
